import "./Day1Module.css";
import { useState, useEffect } from "react";
import { database, auth } from "../src/app/firebase/firebaseconfig";
import { ref, get, update, query } from "firebase/database";

import Topic1 from "./Day3/Topic1";
// import Topic2 from "./Day3/Topic2";
// import Topic3 from "./Day3/Topic3";

export default function Day3Module() {
  const [selectedTopic, setSelectedTopic] = useState<number>(1); // Start from Topic 1
  const [completedTopics, setCompletedTopics] = useState<string[]>([]);
  const userId = auth.currentUser?.uid;
  const [UserID, setUserID] = useState<string>("");
 

  const topics = [
    { id: 1, key: "Topic1", component: <Topic1 /> },
    // { id: 2, key: "Topic2", component: <Topic2 /> },
    // { id: 3, key: "Topic3", component: <Topic3 /> }
  ];

  useEffect(() => {

    const invitedUsers = sessionStorage.getItem("invitedUsers");
    if(invitedUsers){
      setUserID(invitedUsers);
    }

    if (!userId) return;
    const userProgressRef = ref(database, `userProgress/${userId}/day3/module`);

    get(userProgressRef).then((snapshot) => {
      if (snapshot.exists()) {
        setCompletedTopics(Object.keys(snapshot.val()));
      }
    });
  }, [userId]);

  const selectedTopicIndex = topics.findIndex((topic) => topic.id === selectedTopic);
  const selectedTopicKey = topics[selectedTopicIndex]?.key;
  const selectedTopicContent = topics[selectedTopicIndex]?.component;

  // const handleNextTopic = async () => {
  //   if (!selectedTopicKey || !userId) return;

  //   const userProgressRef = ref(database, `userProgress/${userId}/day3/module`);

  //   if (!completedTopics.includes(selectedTopicKey)) {
  //     await update(userProgressRef, { [selectedTopicKey]: true });
  //     setCompletedTopics([...completedTopics, selectedTopicKey]);
  //   }

  //   if (selectedTopicIndex < topics.length - 1) {
  //     setSelectedTopic(topics[selectedTopicIndex + 1].id);
  //   }
  // };

  const handlePreviousTopic = () => {
    if (selectedTopicIndex > 0) {
      setSelectedTopic(topics[selectedTopicIndex - 1].id);
    }
  };

  // const markTopicCompleted = async () => {
  //   if (!selectedTopicKey || !userId) return;

  //   const userProgressRef = ref(database, `users/${userId}/progress/Day3`);
  //   await update(userProgressRef, { ["Module"]: true });

  //   setCompletedTopics([...completedTopics, selectedTopicKey]);
  // };


      const markTopicCompleted = async () => {  
        if (!selectedTopicKey || !userId) return;
    
        const UserEmail = sessionStorage.getItem("userEmail");
    
    
              if (UserID) {
                const usersRef = ref(database, 'invitedUsers');
                const userQuery = query(usersRef);
          
                try {
                  const snapshot = await get(userQuery);
                  if (snapshot.exists()) {
                    const userData = snapshot.val();
                    const autoGeneratedId = Object.keys(userData).find(
                      (key) => userData[key].email === UserEmail
                  );
        
                    const userProgressRef = ref(database, `invitedUsers/${autoGeneratedId}/progress/Day3`);
                    await update(userProgressRef, { ["Assessment 2"]: true });
          
                  }
                } catch (error) {
                  console.error("Error fetching user data:", error);
                }
              }
    
    
        setCompletedTopics([...completedTopics, selectedTopicKey]);
    
        // setCompletionMessage("Let's Go! New Day unlocked...")
      };

      const handleClick = async () => {
        await markTopicCompleted(); // ‚úÖ Mark it done first
        window.open(
          "https://docs.google.com/spreadsheets/d/13cJkx8K3kMLEq0uMyXhdt-T1Z7fwE7kr78JB2EDwbz0/edit?pli=1&gid=0#gid=0",
          "_blank",
          "noopener,noreferrer"
        );
      };

  return (
    <div className="Day1-Main">
      <div className="Header">
        {/* <h1 className="h1">Day 3: Prompting Mastery</h1> */}
      </div>

      <div className="MainContent">
      <div className="Text-Section">

        {selectedTopicContent}
</div>
        <div className="Toggle-Topic">
        {selectedTopicIndex > 0 && (
            <button className="Read-Button-Previous" onClick={handlePreviousTopic}>
              ‚Üê Previous Topic
            </button>
          )}
{/* 
          {selectedTopicIndex < topics.length - 1 ? (
            <button className="Read-Button-Next" onClick={handleNextTopic}>
              {selectedTopicIndex === 0 ? "Let's Get Started ‚Üí" : "Next Topic ‚Üí"}
              </button>
          )  
            // <button className="Read-Button" onClick={markTopicCompleted}>
            //   ‚úÖ Mark Completed
            // </button>
          } */}
    <button

    onClick={handleClick}

  style={{
    padding: "12px 28px",
    backgroundColor: "#2563eb", 
    color: "#ffffff",
    fontSize: "1rem",
    fontWeight: 500,
    border: "1px solid transparent",
    borderRadius: "10px",
    cursor: "pointer",
    boxShadow: "0 2px 6px rgba(0, 0, 0, 0.08)",
    transition: "all 0.25s ease-in-out",
    marginTop: "2rem",
    letterSpacing: "0.3px"
  }}
  onMouseOver={(e) => {
    e.currentTarget.style.backgroundColor = "#1d4ed8"; // blue-700
    e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 0, 0, 0.12)";
  }}
  onMouseOut={(e) => {
    e.currentTarget.style.backgroundColor = "#2563eb";
    e.currentTarget.style.boxShadow = "0 2px 6px rgba(0, 0, 0, 0.08)";
  }}
  onMouseDown={(e) => {
    e.currentTarget.style.transform = "scale(0.97)";
  }}
  onMouseUp={(e) => {
    e.currentTarget.style.transform = "scale(1)";
  }}
>
  üìù Fill Out Google Sheet
</button>



        </div>
      </div>
    </div>
  );
}