"use client";
import "./Day1Module.css";
import { useState, useEffect } from "react";
import { database, auth } from "../src/app/firebase/firebaseconfig";
import { ref, get, update, query } from "firebase/database";

import Topic1 from "./Day22/Topic3";

import NotificationMessage from "@/app/components/NotificationMessage";

export default function Day1Module() {
  const [selectedTopic, setSelectedTopic] = useState<number>(1);
  const [completedTopics, setCompletedTopics] = useState<string[]>([]);
  const userId = auth.currentUser?.uid;
  const [UserID, setUserID] = useState<string>("");
  const [completeMessage, setcompleteMessage] = useState<string | null>(null);


  // const handleTopicCompletion = (topicName: string) => {
  //   setCompletedTopics(prevCompletedTopics => ({ ...prevCompletedTopics, [topicName]: true }));
  //   // Call markTopicCompleted from Dashboard.tsx to update Firebase
  // };


  const topics = [
    { id: 1, key: "Topic1", component: <Topic1 /> }
    // { id: 2, key: "Topic2", component: <Topic2 /> },
    // { id: 3, key: "Topic3", component: <Topic3 /> },
    // { id: 4, key: "Topic4", component: <Topic4 /> },
    // { id: 5, key: "Topic5", component: <Topic5 /> },
    // { id: 6, key: "Topic6", component: <Topic6 /> },
    // { id: 7, key: "Topic7", component: <Topic7 /> },
    // { id: 8, key: "Topic8", component: <Topic8 /> },
    // { id: 9, key: "Topic9", component: <Topic9 /> },
  ];

  useEffect(() => {

    const invitedUsers = sessionStorage.getItem("invitedUsers");
    if(invitedUsers){
      setUserID(invitedUsers);
    }


    if (!userId) return;
    const userProgressRef = ref(database, `userProgress/${userId}/Day1/module1`);

    get(userProgressRef).then((snapshot) => {
      if (snapshot.exists()) {
        setCompletedTopics(Object.keys(snapshot.val()));
      }
    });
  }, [userId]);

  const selectedTopicIndex = topics.findIndex((topic) => topic.id === selectedTopic);
  const selectedTopicKey = topics[selectedTopicIndex]?.key;
  const selectedTopicContent = topics[selectedTopicIndex]?.component;

  const handleNextTopic = async () => {
    if (!selectedTopicKey || !userId) return;

    const userProgressRef = ref(database, `userProgress/${userId}/Day1/module1`);

    if (!completedTopics.includes(selectedTopicKey)) {
      await update(userProgressRef, { [selectedTopicKey]: true });
      setCompletedTopics([...completedTopics, selectedTopicKey]);
    }

    if (selectedTopicIndex < topics.length - 1) {
      setSelectedTopic(topics[selectedTopicIndex + 1].id);
    }
  };

  const handlePreviousTopic = () => {
    if (selectedTopicIndex > 0) {
      setSelectedTopic(topics[selectedTopicIndex - 1].id);
    }
  };

  const markTopicCompleted = async () => {  

    setcompleteMessage(null);

    if (!selectedTopicKey || !userId) return;

    const UserEmail = sessionStorage.getItem("userEmail");


          if (UserID) {
            const usersRef = ref(database, 'invitedUsers');
            const userQuery = query(usersRef);
      
            try {
              const snapshot = await get(userQuery);
              if (snapshot.exists()) {
                const userData = snapshot.val();
                const autoGeneratedId = Object.keys(userData).find(
                  (key) => userData[key].email === UserEmail
              );
    
                const userProgressRef = ref(database, `invitedUsers/${autoGeneratedId}/progress/Day1`);
                await update(userProgressRef, { ["Module"]: true });

                setcompleteMessage("Module Completed")
      
              }
            } catch (error) {
              console.error("Error fetching user data:", error);
            }
          }


    setCompletedTopics([...completedTopics, selectedTopicKey]);

    // setCompletionMessage("Let's Go! New Day unlocked...")
  };

  return (
    <div className="Day1-Main">
      <div className="Header">
        {/* <h1 className="h1">Day 1: The Importance Of Data In Model Training</h1> */}
      </div>

      <div className="MainContent">
        <div className="Text-Section">
        {selectedTopicContent}

        </div>
        <div className="Toggle-Topic">
          {selectedTopicIndex > 0 && (
            <button className="Read-Button-Previous" onClick={handlePreviousTopic}>
              ← Previous Topic
            </button>
          )}

          {selectedTopicIndex < topics.length - 1 ? (
            <button className="Read-Button-Next" onClick={handleNextTopic}>
              {selectedTopicIndex === 0 ? "Let's Get Started →" : "Next Topic →"}
            </button>
          ) : (
        <button className="Read-Button" onClick={markTopicCompleted}>
  ✅ Mark Completed
</button>

          )}
        </div>
      </div>
      {/* {CompletionMessage && <NotificationMessage message={CompletionMessage} onClose={() => setCompletionMessage("")} color="success"/>} */}
      {completeMessage && <NotificationMessage message={completeMessage} onClose={() => setcompleteMessage("")} color="success"  />}

    </div>
  );
}








