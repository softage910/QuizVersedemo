// "use client";
// import React, { useEffect, useState } from "react";
// import { getDatabase, ref, onValue } from "firebase/database";
// import "./progressbar.css";

// const ProgressBar = () => {
//   const [progressData, setProgressData] = useState<Record<string, Record<string, boolean>> | null>(null);
//   const [isLoading, setIsLoading] = useState(true); // NEW: Loading state
//   const totalTasks = 16;

//   useEffect(() => {
//     const db = getDatabase();
//     const userId = "gecFmjjP8zTrQZwDDWRdXh3ekaS2"; // Replace with dynamic user ID
//     const progressRef = ref(db, `users/${userId}/progress`);

//     onValue(progressRef, (snapshot) => {
//       if (snapshot.exists()) {
//         setProgressData(snapshot.val());
//       } else {
//         setProgressData({});
//       }
//       setIsLoading(false); // NEW: Set loading to false after fetching data
//     });
//   }, []);

//   if (isLoading) {
//     return <p>Loading progress...</p>; // Prevents incorrect display before data loads
//   }

//   // Calculate completed tasks
//   const completedTasks = progressData
//     ? Object.values(progressData).reduce(
//         (count, day) => count + Object.values(day).filter((task) => task === true).length,
//         0
//       )
//     : 0;

//   // Calculate progress percentage
//   const progressPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

//   // Determine the current day
//   let currentDay = "All tasks completed!";
//   if (progressData) {
//     for (const [day, tasks] of Object.entries(progressData)) {
//       if (Object.values(tasks).includes(false)) {
//         currentDay = `On ${day}`;
//         break;
//       }
//     }
//   }

//   return (
//     <div className="container">
//       <div className="progress">
//         <div
//           className="progress-bar progress-bar-striped"
//           role="progressbar"
//           style={{
//             width: `${progressPercentage}%`,
//             backgroundColor: "#28a745",
//           }}
//         >

//           <div className="progress-value">
//           <span className="glowing-text">{currentDay}</span>
//           <br/>
//            {progressPercentage.toFixed(2)}%
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default ProgressBar;


"use client";
import React, { useEffect, useState } from "react";
import { ref, onValue, query, orderByChild, equalTo, get } from "firebase/database";
import "./progressbar.css";
import {auth, database} from "../firebase/firebaseconfig";

const ProgressBar = () => {
  const [progressData, setProgressData] = useState<Record<string, Record<string, boolean>> | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const totalTasks = 15;
  const [currentDayTasks, setCurrentDayTasks] = useState<Record<string, boolean>>({});
  const [userDetails, setUserDetails] = useState<{ name: string; uid: string } | null>(null);

  useEffect(() => {
    const userData = localStorage.getItem("userDetails");


    if (userData) {
      setUserDetails(JSON.parse(userData));
    }
  }, []);

  useEffect(() => {
    const fetchProgress = async () => {
      if (userDetails && userDetails.uid) {
        const usersRef = ref(database, 'users');
        const userQuery = query(usersRef, orderByChild('uid'), equalTo(userDetails.uid));
  
        try {
          const snapshot = await get(userQuery);
          if (snapshot.exists()) {
            const userData = snapshot.val();
            const autoGeneratedId = Object.keys(userData)[0];
  
            const progressRef = ref(database, `users/${autoGeneratedId}/progress`);
  
            onValue(progressRef, (snapshot) => {
              if (snapshot.exists()) {
                setProgressData(snapshot.val());
                        // Find the current day
                        for (const [day, tasks] of Object.entries(snapshot.val())) {
                          if (Object.values(tasks).includes(false)) {
                            setCurrentDayTasks(tasks);
                            break;
                          }
                        }
              } else {
                setProgressData({});
              }
              setTimeout(() => setIsLoading(false), 2000); // Smooth transition
            });
            } else {
            console.log("User not found in database.");
          }
        } catch (error) {
          console.error("Error fetching user data:", error);
        }
      }
    };

    
    fetchProgress();

    // const user = auth.currentUser;
    // console.log(user);
    // const userId = "cOVXAERZKEWqsvUtrNnMuvoWi002"; // Replace with dynamic user ID
    // const progressRef = ref(database, `users/${user}/progress`);

    // onValue(progressRef, (snapshot) => {
    //   if (snapshot.exists()) {
    //     setProgressData(snapshot.val());
    //             // Find the current day
    //             for (const [day, tasks] of Object.entries(snapshot.val())) {
    //               if (Object.values(tasks).includes(false)) {
    //                 setCurrentDayTasks(tasks);
    //                 break;
    //               }
    //             }
    //   } else {
    //     setProgressData({});
    //   }
    //   setTimeout(() => setIsLoading(false), 2000); // Smooth transition
    // });
  }, [userDetails]);


  if (isLoading) {
    return (
      <div className="loading-container">
        <div className="spinner"></div>
        <p className="loading-text">Fetching Progress<span className="dots"></span></p>
      </div>
    );
  }

  // Calculate completed tasks
  const completedTasks = progressData
    ? Object.values(progressData).reduce(
        (count, day) => count + Object.values(day).filter((task) => task === true).length,
        0
      )
    : 0;

  // Calculate progress percentage
  const progressPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;

  let currentDay = "Day1"; // Default to Day1 if no data exists

if (progressData) {
  const allDays = Object.keys(progressData);
  let lastDay = allDays[allDays.length - 1]; // Get the last available day

  let foundIncomplete = false;

  for (const [day, tasks] of Object.entries(progressData)) {
    if (Object.values(tasks).includes(false)) {
      currentDay = `${day}`;
      foundIncomplete = true;
      break;
    }
  }

  // If all tasks are completed, show the last topic
  if (!foundIncomplete) {
    currentDay = `${lastDay}`;
  }
}

  return (
    <div className="container">
      <div className="progress">
        <div
          className="progress-bar progress-bar-striped"
          role="progressbar"
          style={{
            width: `${progressPercentage}%`,
            backgroundColor: "#28a745",
          }}
        >
          <div style={{color: '#f8b400'}}>{progressPercentage}%</div>
          <div className="triangle"></div>
          <div className="progress-value">
           <span className="glowing-text">{currentDay}</span>
           </div>
        </div>
      </div>

      {/* <div className="task-cards">
      {Object.entries(currentDayTasks).map(([taskName, isCompleted], index) => (
          <div key={taskName} className={`task-card ${isCompleted ? "completed" : "pending"} fade-in`} style={{ animationDelay: `${index * 0.2}s` }}>
            <h3>{taskName}</h3>
            <p>{isCompleted ? "✅ Completed" : "❌ Pending"}</p>
          </div>
        ))}
      </div> */}

<div className="task-cards">
{Object.entries(currentDayTasks)
  .sort(([taskA], [taskB]) => {
    if (taskA === "Module") return -1; // Keep "Module" first
    if (taskB === "Module") return 1;
    
    // Extract numeric parts from "Assessment" names for proper sorting
    const numA = parseInt(taskA.match(/\d+/)?.[0] || "0", 10);
    const numB = parseInt(taskB.match(/\d+/)?.[0] || "0", 10);
    
    return numA - numB; // Sort assessments numerically (1 → 2 → 3)
  })
  .map(([taskName, isCompleted], index) => (
    <div 
      key={taskName} 
      className={`task-card ${isCompleted ? "completed" : "pending"} fade-in`} 
      style={{ animationDelay: `${index * 0.2}s` }}
    >
      <h3>{taskName}</h3>
      <p>{isCompleted ? "✅" : "❌"}</p>
    </div>
))}


      </div>
    </div>
  );
};

export default ProgressBar;
